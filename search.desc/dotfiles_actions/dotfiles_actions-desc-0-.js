searchState.loadedDescShard("dotfiles_actions", 0, "This crate contains all concrete actions and directives. …\nThis module contains the AptAction and AptDirective\nThis module contains the BrewAction and BrewDirective\nThis module contains the CreateAction and CreateDirective …\nThis module contains the ExecAction and ExecDirective used …\nModule that contains interfaces common to directives that …\nThis module contains the HomebrewInstallAction\nModule that contains common code for all commands that …\nThis module contains the LinkAction and LinkDirective …\nThis module contains the OhMyZshInstallAction\nThis module contains the AptAction that installs packages …\nThis module defines AptDirective.\nAptAction Installs software using apt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new AptAction\nList of packages to install.\nSkips this action if it is running in a CI environment.\nA directive that can build AptActions to install packages\nName of the APT directive\nThe string that identifies the list of packages to install\nReturns the argument unchanged.\nInitialize the defaults for the AptDirective.\nCalls <code>U::from(self)</code>.\nParse the list of actions from yaml, in this case it’s …\nThis module contains the BrewAction that installs a brew …\nThis module defines BrewDirective.\nBrewAction Installs software using homebrew.\nwhen the app is already installed before the cask install.\nList of casks to install. Casks usually are macOS apps …\nPasses <code>--force</code> to <code>brew install --cask</code>.\nList of brew formulae to <code>brew install</code>, usually command …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new BrewAction\nSkips this action if it is running in a CI environment.\nList of repositories to tap into using <code>brew tap</code>.\nadopt casks to deal with previously installed apps\nA directive that can build BrewActions to install …\nThe string that identifies the list of casks to install\nName of the Brew directive\nforce casks\nThe string that identifies the list of formulae to install\nThe string that identifies the list of taps to install\nReturns the argument unchanged.\nInitialize the defaults for the BrewDirective.\nCalls <code>U::from(self)</code>.\nParse the list of actions from yaml, in this case it’s …\nThis module contains the CreateAction that creates a new …\nThis module defines CreateDirective.\nCreateAction creates a new directory when executed\nA Fake create action that works on a fake test filesystem.\nA native create action that works on the real filesystem.\nForce creation of the directory and all its parents if …\nCurrent directory that will be used to determine relative …\nDirectory to create. Can be absolute or relative.\nCreates the <code>directory</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new instance of CreateAction\nConstant for the name of the <code>create_parent_dirs</code> Setting …\nA directive that can build CreateActions to create …\nConstant for the name of the <code>create</code> directive.\nConstant for the name of the <code>directory</code> argument that …\nCreateDirective that uses the native FakeFileSystem for …\nCreateDirective that uses the native OsFileSystem.\nReturns the argument unchanged.\nInitializes the default configuration for the …\nCalls <code>U::from(self)</code>.\nThis module contains the ExecAction that executes a …\nThis module defines ExecDirective which represents …\nExecAction Installs software using homebrew.\nThe command to run\nDescription for the command to run.\nWhether to print out the command for clarity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Exec Action that will run from the parent …\nCommand to run\nOptional description for the command to run\nName of the Exec directive\nEcho the command to run before running it.\nA directive that can build ExecActions to run commands\nReturns the argument unchanged.\nInitialize the defaults for the BrewDirective.\nCalls <code>U::from(self)</code>.\nCommon trait for all the directives that use a Filesystem\nReturns the filesystem instance\nReturns a mutable reference to the filesystem instance\nThis module contains the HomebrewInstallAction that …\nHomebrewInstallAction installs homebrew.\nReturns true if it can find a brew command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new HomebrewInstallAction\nTrait that represents a command that installs an item …\nThe description of the action to run, i.e. “Installing …\nThe name of the action to run, i.e. “cask”\nThe arguments to pass to the command\nThe base command to run\nRuns the command to execut\na list of items to display\nThe item actually being installed, for example a homebrew …\nThis module contains the LinkAction that creates a new …\nThis module defines LinkDirective.\nA Fake create action that works on a fake test filesystem.\nLinkAction creates a new symlink <code>path</code> that points to <code>target</code>…\nA native create action that works on the real filesystem.\nCreate all parent directories if they do not exist already\nForce to replace an existing file or directory when …\nReturns the argument unchanged.\nSucceed even if <code>target</code> doesn’t point to an existing file …\nCalls <code>U::from(self)</code>.\nConstructs a new LinkAction\nPath of the new symlink\nForce to re-create the symlink if it exists already\nIf the target is another symlink, resolve the ultimate …\nPath that the symlink points to.\nCreate parent dirs if they don’t exist\nName of the link directive\nForce setting, replaces any other file or directory\nLinkDirective that uses the native FakeFileSystem for …\nCreate the symlink even if the target file does not exist\nA directive that can build LinkActions to create …\nLinkDirective that uses the native OsFileSystem.\nPath setting (path of the symlink)\nRelink setting, if true the action relinks an existing …\nResolves the target if it is a symlink and uses the final …\nTarget setting (path to the file the symlink points to)\nReturns the argument unchanged.\nReturns the FileSystem instance being used.\nInitialize the defaults for the LinkDirective.\nCalls <code>U::from(self)</code>.\nParse a shortened action with only link name to target name\nThis module contains the OhMyZshInstallAction that sets up …\nOhMyZshInstallAction sets up ohmyzsh.\nReturns true if the $ZSH environment var is set\nReturns true if it can find a brew command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new OhMyZshInstallAction")