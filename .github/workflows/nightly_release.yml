name: Release Nightly

on:
  # Run nightly
  schedule:
    - cron: "0 0 * * *"

  # Allow for manual dispatch on GitHub
  workflow_dispatch:

jobs:
  create-nightly-release:
    name: Create Nightly Release
    runs-on: ubuntu-latest
    outputs:
      activity_check: ${{ env.GHA_REPO_ALIVE }}
      date: ${{ steps.current_time_underscores.outputs.formattedTime }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_prefix: dotfiles-nightly-${{ steps.current_time_underscores.outputs.formattedTime }}
    steps:
      - name: Activity check
        run: |
          :
          # Based off https://github.community/t/trigger-workflow-if-there-is-commit-in-last-24-hours/17074/3
          curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/commits | jq -r '[.[]][0]' > $HOME/commit.json
          date="$(jq -r '.commit.committer.date' $HOME/commit.json)"
          timestamp=$(date --utc -d "$date" +%s)
          days=$(( ( $(date --utc +%s) - $timestamp ) / 86400 ))
          author="$(jq -r '.commit.committer.name' $HOME/commit.json)"
          url="$(jq -r '.html_url' $HOME/commit.json)"
          rm -f $HOME/commit.json
          echo "Repository activity: $timestamp $author $url"
          alive=0
          if [ "${{ github.event_name }}" == "repository_dispatch" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "[WARNING] Ignoring activity check: workflow triggered manually."
            alive=1
          elif [[ $days < 1 ]]; then
            echo Repository active
            alive=1
          else
            echo "[WARNING] Repository not updated: event ${{ github.event_name }} not allowed to modify stale repository."
          fi
          if [[ $alive == 1 ]]; then
            echo "GHA_REPO_ALIVE=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Get current time with dashes
        uses: josStorer/get-current-time@v2.0.2
        id: current_time_dashes
        with:
          format: YYYY-MM-DD

      - name: Get current time with underscores
        uses: josStorer/get-current-time@v2.0.2
        id: current_time_underscores
        with:
          format: YYYY_MM_DD

      - name: Create release
        if: env.GHA_REPO_ALIVE == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ steps.current_time_dashes.outputs.formattedTime }}
          release_name: Nightly ${{ steps.current_time_dashes.outputs.formattedTime }}
          prerelease: true

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]"
          file_pattern: CHANGELOG.md

  build:
    name: Build ${{ matrix.target.name }}
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.activity_check == 'true'
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly]
        target:
          - name: x86_64-unknown-linux-gnu
            gh_env: ubuntu-latest
          - name: aarch64-unknown-linux-gnu
            gh_env: ubuntu-latest
          - name: armv7-unknown-linux-gnueabihf
            gh_env: ubuntu-latest
          - name: aarch64-apple-darwin
            gh_env: macos-12
          - name: x86_64-apple-darwin
            gh_env: macos-12
        include:
          - target:
              name: x86_64-unknown-linux-gnu
            cross: false
            run_tests: true
          - target:
              name: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            cross: true
            run_tests: false
          - target:
              name: armv7-unknown-linux-gnueabihf
            linker: gcc-arm-linux-gnueabihf
            cross: true
            run_tests: false
          - target:
              name: aarch64-apple-darwin
            cross: false
            run_tests: false
          - target:
              name: x86_64-apple-darwin
            cross: false
            run_tests: true

    env:
      PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-${{ matrix.target.name }}.${{ 'tar.gz' }}
      CARGO_BUILD_DIR: target/${{ matrix.target.name }}/release
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    runs-on: ${{ matrix.target.gh_env }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      # When rustup is updated, it tries to replace its binary, which on Windows is somehow locked.
      # This can result in the CI failure, see: https://github.com/rust-lang/rustup/issues/3029
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust}}
          target: ${{ matrix.target.name }}
          override: true
          profile: minimal
      - name: Install Linker
        if: matrix.cross
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.target.name }}--nightly-release--branch--${{ github.ref }}
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --package dotfiles --release --target ${{ matrix.target.name }}
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}

      - name: Package common
        run: |
          mkdir package
          cp README.md package/README.md
          cp LICENSE.txt package/LICENSE.txt

      - name: Package Linux
        if: runner.os == 'Linux'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/dotfiles package/dotfiles
          cd package/
          tar -czvf ../${{ env.PACKAGE_FILE }} *

      - name: Upload package
        if: runner.os != 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-nightly-release.outputs.upload_url }}
          asset_path: ./${{ env.PACKAGE_FILE }}
          asset_name: ${{ env.PACKAGE_FILE }}
          asset_content_type: ${{ endsWith(env.PACKAGE_FILE, 'tar.gz') && 'application/gzip' || 'application/zip' }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ env.CARGO_BUILD_DIR }}/dotfiles
            package

  build-mac-universal-binary-and-all-binaries-package:
    name: Build macOS universal binary
    needs: [create-nightly-release, build]
    runs-on: macos-latest
    env:
      MACOS_PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-macos-universal.tar.gz
      ALL_BINARIES_PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-all_binaries.tar.gz
    steps:
      - name: Download aarch64 binary
        uses: actions/download-artifact@v2
        with:
          name: aarch64-apple-darwin

      - name: Download x86_64 binary
        uses: actions/download-artifact@v2
        with:
          name: x86_64-apple-darwin

      - name: Make universal binary
        run: |
          lipo -create -output package/dotfiles target/x86_64-apple-darwin/release/dotfiles target/aarch64-apple-darwin/release/dotfiles
          chmod +x package/dotfiles

      - name: Package macOS
        run: |
          cd package
          tar -czvf ../${{ env.MACOS_PACKAGE_FILE }} *

      - name: Upload package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-nightly-release.outputs.upload_url }}
          asset_path: ./${{ env.MACOS_PACKAGE_FILE }}
          asset_name: ${{ env.MACOS_PACKAGE_FILE }}
          asset_content_type: application/gzip

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-universal
          path: |
            package

      - name: Download x86_64 binary
        uses: actions/download-artifact@v2
        with:
          name: x86_64-unknown-linux-gnu
      - name: Download armv7 binary
        uses: actions/download-artifact@v2
        with:
          name: armv7-unknown-linux-gnueabihf
      - name: Download aarch64 binary
        uses: actions/download-artifact@v2
        with:
          name: aarch64-unknown-linux-gnu
      - name: Organize package
        run: |
          mv package/dotfiles package/dotfiles-macos
          chmod +x package/dotfiles-macos

          mv target/x86_64-unknown-linux-gnu/release/dotfiles package/dotfiles-x86_64
          chmod +x package/dotfiles-x86_64

          mv target/armv7-unknown-linux-gnueabihf/release/dotfiles package/dotfiles-armv7
          chmod +x package/dotfiles-armv7

          mv target/aarch64-unknown-linux-gnu/release/dotfiles package/dotfiles-aarch64
          chmod +x package/dotfiles-aarch64

      - name: Package all binaries
        run: |
          cd package
          tar -czvf ../${{ env.ALL_BINARIES_PACKAGE_FILE }} *

      - name: Upload package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-nightly-release.outputs.upload_url }}
          asset_path: ./${{ env.ALL_BINARIES_PACKAGE_FILE }}
          asset_name: ${{ env.ALL_BINARIES_PACKAGE_FILE }}
          asset_content_type: application/gzip
